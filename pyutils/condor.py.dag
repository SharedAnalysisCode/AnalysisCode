"""
condor.py

A python module for submitting condor jobs.  The user should use
the run function defined at the bottom of this file.
"""

import time
import os


#------------------------------------------------------------------------------
class Pool(object):
    #__________________________________________________________________________
    def __init__(self, n, **kw):
        self._n = n
        self._config = dict(kw)
        self._config.setdefault('universe', 'vanilla')
        self._config.setdefault('executable', '/bin/echo')
        self._config.setdefault('arguments', '')
        self._config.setdefault('output', 'stdout.log')
        self._config.setdefault('error', 'stdout.log')
        self._config.setdefault('getenv', 'True')
        self._config.setdefault('should_transfer_files', 'YES')
        self._config.setdefault('when_to_transfer_output', 'ON_EXIT_OR_EVICT')

    #__________________________________________________________________________
    def write_job(self, dirname, filename='condor.job'):
        basedir = os.getcwd()
        filename = os.path.join(basedir, dirname, filename)
        tmp = dict(self._config)
        tmp['time'] = time.ctime()
        tmp['user'] = os.environ['USER']
        template = """# condor config file
#
# %(filename)s
# %(time)s
# user: %(user)s
# generated by pyutils/condor.py
# see also: https://asrv-02.hep.upenn.edu/groups/pennatlastier3users/
#           http://www.cs.wisc.edu/condor/manual/
#------------------------------------------------------------------------------

#Use only the vanilla universe
universe = %(universe)s

# This is the executable to run.  If a script,
#   be sure to mark it "#!<path to interp>" on the first line
executable = %(executable)s

# Filename for stdout, otherwise it is lost
output = %(output)s
error = %(error)s
log = /tmp/condor.log

# Copy the submittor's environment variables.  Usually required.
getenv = %(getenv)s

# Copy output files when done.  REQUIRED to run in a protected directory
should_transfer_files = %(should_transfer_files)s
when_to_transfer_output = %(when_to_transfer_output)s

initialdir = $(initialdir)
arguments = $(arguments)

queue
#------------------------------------------------------------------------------
# EOF
"""
        tmp['filename'] = filename
        f = open(filename, 'w')
        f.write(template % tmp)
        f.close()

    #__________________________________________________________________________
    def write_dag(self, args, dirname, filename='condor.dag'):
        basedir = os.getcwd()
        f = open(os.path.join(dirname, filename), 'w')
        for i in xrange(self._n):
            initialdir = os.path.join(basedir, dirname, 'job_%03i' % i)
            node_name = os.path.join(dirname, 'job_%03i' % i)
            f.write('JOB  %s %s/condor.job\n' % (node_name, dirname))
            f.write('VARS %s arguments="%s"\n' % (node_name, args[i]))
            f.write('VARS %s initialdir="%s"\n' % (node_name, initialdir))
            f.write('\n')
        f.close()

    #__________________________________________________________________________
    def make_initialdirs(self, dirname):
        basedir = os.getcwd()
        for i in xrange(self._n):
            initialdir = os.path.join(basedir, dirname, 'job_%03i' % i)
            if not os.path.isdir(initialdir):
                os.system('mkdir -p %s' % initialdir)

    #__________________________________________________________________________
    def map(self, args, dirname='test'):
        self.make_initialdirs(dirname)
        self.write_job(dirname)
        self.write_dag(args, dirname)
        filename = os.path.join(dirname, 'condor.dag')
        print 'condor_submit_dag %s' % filename
        os.system('condor_submit_dag %s' % filename)

# end of Pool class definition
#------------------------------------------------------------------------------

import listutils
from glob import glob


def run(exe, arg_template, input, dirname='condor_test', n_files=0, n_jobs=0,
        comma_sep_input=True):
    """
    exe: The name of the executable to be run.  Probably best to give
         the full path like '/home/user/my_job'
    arg_template: Should be the arguments given after the executable
         with a %s in place of where the input files will be given
         as a comma-separated list.
    input: a list of the input files to be divided among jobs.
    dirname: the name of the working directory for the condor job to
         create and run in.
    n_files: the number of files per sub-job.
    n_jobs: the number of sub-jobs.
    """

    # glob paths
    input_files = []
    for fn in input:
        if fn.count('*'):
            input_files.extend( glob(fn) )
        else:
            input_files.append(fn)
    
    # divide input files
    if n_files:
        divided_files = [ x for x in listutils.chunk(input_files, n_files) ]
    elif n_jobs:
        divided_files = [ x for x in listutils.divide(input_files, n_jobs) ]
    else:
        divided_files = [ x for x in listutils.chunk(input_files, 1) ]

    divided_files = filter(None, divided_files)
    if n_jobs and n_jobs != len(divided_files):
        print '  There are only %s files for %s jobs.' % (len(divided_files), n_jobs)
        print '  Changing n_jobs = %s jobs.' % (len(divided_files))
    
    # make args list
#    print 'divided_files', divided_files
    if comma_sep_input:
        args = [ arg_template % (','.join(files)) for files in divided_files ]
    else:
        args = [ arg_template % (' '.join(files)) for files in divided_files ]


    # run
    pool = Pool(len(args), executable=exe)
    return pool.map(args, dirname=dirname)

